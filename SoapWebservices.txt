Webservices

what is web services?
- Communication b/w service provider and service consumer applications over the n/w through HTTP protocol
- Exchange messages or data in diff formats like JSON, XML, SOAP
- Advantages of Webservice
	- Interoperability -> platform independent
	- Extensibility -> Can implement own logic
	- Loosely Coupled -> 
	- Mashups -> combining services or data from multiple services into one single page

Types of webservices
- SOAP vs REST
- SOAP (Simple Object Access Protocol)
	- Apps communicate through SOAP messages -> xml format
	- SOAP uses HTTP POST Method
- REST
	- REST is built on top of HTTP protocol
	- REST uses all the HTTP methods
	- REST supports various formats like JSON, XML, TEXT
	


Java Standards for Implementing Webservices
- JAX-WS ->Java API for XML based webservices
	- JAX-WS is a standard for implementing SOAP based webservices
- JAX-RS -> Java API for RESTFull services
	JAX-RS is a standard for implementing RESTFull services
		
SOA
- Collection of Architectural Priniciples to design and implement the Appln
	- Appln in such a way that app consists of sevices with simple interfaces in a loosely coupled manner
- Maintained
		- by W3 and OASIS
- Contract b/w the services
		- SOAP - WSDL
		- REST - WADL
- Data format
	- XML is the data format used b/w services in SOA 
- Advantages
	- Platform Independent -> SOA apps should be platform independent
	- FOCUSSED Developer Roles
	- Loosely Coupled
	- Reusability
	- Cost Reduction
	- Scalability
	- Availability
- Webservice implements SOA because of interoperability, Platform independent, Reusability	
- SOA is set of prinicples and webservice is a way of implementing the SOA in the service or App
- In SOA world -> service is implementation of business logic that operates on its own

Section 4

what is XML?
- Doesn't have predifined markup elements
- Can create own markup elements 
- Elements gives the info about the data

Why XML?
- Carries both Data and metadata
- Well Formedness
- Validation -> schema file -> validate xml file against the schema file

When XML?
- Configuaration File
- Data Exchange b/w the applications
- Save and Manipulate the data

What is XSD?
- XSD -> XML Schema definition
- Grammer or blueprint for an xml document
- XML file that follows the XSD is a valid XML file
- XSD is also a XML file with elements that are defined by W3C
- Schema file will be saved with .XSD extension

When to Use XSD?
- XSD is a contract b/w the two XML users or the apps
- XSD will be used as a contract b/w the two xml apps
- XSD will be  used to validate Request and Response from the apps


Namespaces
- used to uniqely identify the elements and attributes in the xml document
- Namespaces are defined in schema document using the targetNamespace attributes
- Namespaces are prefixed with shorthand form 
- Namespace must be defined at the root element in the xml document
- Shorthand form of namespace must be used at all the elements on the document
- schema
	targetNamespace="http://www.amazon.in/order"
	
	prefix:
		xmlns:amz="http://www.amazon.in/order"
- XML
		<order xmlns:amz="http://www.amazon.in/order">
			<amz:orderId>123<amz:orderId>
			<amz:shippingAdrress></amz:shippingAdrress>
		</order> 

		
targetNamespace
- targetNamespace is used to identify the elements uniquely in xml document
- xmlns:tns is a prefix or shorthand form
- xml file should have root element with targetNamespace

Creating the Schema file
- XML file will have only one root element
- XML SCHEMA will have only element with complex type


SYNTAX of Types is XML schema

- 	COMPLEX Type
    	<complexType name="">
		 <sequence>
			<element name="" type="">
		 <sequence>
		<complexeType>	

- SIMPLE Type
	
		<simpleType name="">
			<restriction base="string">
				<pattren></pattren>
				<minLength></minLength>
				<maxLength></maxLength>
			<restriction>
		<simpleType>	
			
- Sequence
	- used maintain the exact order of elements in the XML file
	
- Choice
   - used to specify that XML file can contain either one of the element

   <complexType name="payment">
		<choice>
			<element name="cash" type="int"></element>
			<element name="insurance" type="tns:INSURANCE"></element>
		</choice>
	</complexType>	
   
- All 
	-  used when order of elements not required
	
	<complexType name="INSURANCE">
		<all>
			<element name="provider" type="string"/>
			<element name="limit" type="double"/>
		</all>
	</complexType>	
	
- Occurance of number of elements
	- minOccurs="0" -> optional
	- maxOccurs="unbounded" -> any # of occurances


	
ElementFormDefault="qualified" or "unqualified"
- Nothing to do with the XML schema file
- qualified -> all the elements in the XML file should have appended with targetNamespace
- unqualified -> prefix is not mandatory in the XML file


Defining the attributes in the XML schema

- 
	<complexType name="">
		<attribute name="" type=""></attribute>
	</complexType>	
	
	
====================================================================================================================================================
SECTION 4: SOAP WEBSERVICES


What is Web Service?
- Enables seamless communication b/w the applications running on different plafforms over the Internet.



SOAP Advantages 
 - Platform Independent and Technology Independent
	- HTTP -> Transport Independent 
	- XML -> Data Independent
	- As long as App has support for HTTP and XML it can be service consumer and service provider
 - Extensibility or Customization
 - Reusability and Cost Reduction
 - Legacy Applications  are Great
 - Opens up Door for new Revenue and Profit Channels
	- Charge per use
 - Firewalls like Webservice
	- HTTP is very friendly with Firewalls
	- HTTP communicates through port 80
	- HTTPS communicates through port 443
	- Usually in an organizations port 80 is not blocked
	- Since port 80 is not blocked its very easy to use webservices inside and outside the organizations

SOAP Disadvantages
 - Ambiguous Webservice standards - due to people from different mindsets and diff organizations
 - Performance degradation due to serialization and deserialization of SOAP messages
	- Every time SOAP messages needs to convert to Language specific Objects and vice versa
 - Consumes more Network Bandwidth due to huge payload
 - SOAP request and response messages have some overhead compared to REST request and response messages

 
When to SOAP Webserives?
- When Formal Contract needs to be defined b/w the Webservice provider and consumer
- When Architecture requires non-functional requirements like Security and Transaction Management
- Non-Functional requirements like Transaction Management and Security comes along with Web Service Engines like Apace CXF
- Developers needs to know how to configure and use them

SOAP

- SOAP is specification from W3C and current version is 1.2
- W3C specifies what are the elements that can be used on SOAP request and response messages
- SOAP:ENVELOPE is root element of SOAP messages and encapsulates the soap header and soap body
- SOAP:HEADER and SOAP:BODY are the child elements of the SOAP:ENVELOPE
	<soap:Envelope>
		<soap:header></soap:header>
		<soap:Body></soap:Body>
	<soap:Envelope>	
- SOAP:HEADER contains header info's
- SOAP:BODY contains actual request and response payloads
- SOAP:FAULT is an optional element and child element of soap body which will be returned when an exception occurs 
- SOAP:FAULT will have soap:code and soap:reason as the child element
- soap:code will have the soap fault code soap:reason for the exception
	<soap:Body>
		<soap:Fault>
			<soap:code><soap:code>
			<soap:Reason>
				<soap:Text></soap:Text>
			</soap:Reason>
		</soap:Fault>
	</soap:Body> 
	
- SOAP Header with security	element
	<soap:Header>
		<wsse:Security>
			<wsse:UsernameToken>
				<wsse:Username></wsse:Username>
				<swsse:Password></wsse:Password>
		</wsse:Security>
	</soap:Header>	
	


WSDL
- WSDL is not meant for human reading
- Webservice Definition Language
- WSDL is contract b/w service provider and consumer
- WSDL is a XML file with .WSDL extension
- WSDL provides details about
	- What this webservice provides
	- How to consume the Webservices
	
- WSDL file is divided into two parts
	- Abstract ---> WHAT
		- Definitions
			- Types -> Request and Response
			- Message -> params and result(return)
			- Operation -> methods and also the webservice
			- Porttype -> container of all the webservices in the WSDL
	- Physical ---> HOW
		- Binding -> What type of binding needs to use --:> default DOCUMENT TYPE LITERAL WRAPPED
		- Service -> specifies the URL and end point to consume the webserice 
	
SOAP Binding Style

- SOAP Binding style will have impact 3 things
		1. SOAP Payload --> How the payload looks like ---> message inside the soap body looks like
		2. Validation -> Whether the entire SOAP body can be validated against the schema in WSDL
		3. Operation Name in SOAP message body --> webservice method that needs to invoke will be the soap message body or payload

===============================================================================================================================================
- SOAP Binding Style 
		1. RPC/literal
		2. RPC/encoded
		3. DOCUMENT/literal
		4. DOCUMENT/encoded
		
Design Approaches for developing SOAP Webservices
- Top down or Contract first or WSDL first
	- Steps 
		- Create the WSDL file
		- Generate the java stubs using tools like WSDL2JAVA
		- Implement the webserives end point
	-Advantages
		- WSDL First will be used when contract first needs to defined b/w consumer and provider
		- Faster Integration
		- Everybody will be on the same page
		- Better interoperability
- Bottom Up or Code First or Java First
	- Steps 
		- create the java files first 
		- create the WSDL file from the java using tools like java2wsdl
	- Advantages
		- Usefull when bussiness logic exist and just needs to expose them with webservice
		- Usefull for legacy apps
		
		
================================================================================================================================================
SECTION 6: JAX-WS and JAXB

JAX-WS:

- specification from the oracle
- webservice engines like apache cxf and glassfish implements those specification
- webservice engines read those annotations and take appropriate actions
- JAX-WS API will be implemented by developers 
	- JAX-WS API provides annotations --> java classes needs to mark with those annotations
	- Both consumer and producer needs the mark the classes with JAX-WS annotations
	
JAX-WS Annotations

Core
	- @javax.jws.WebService
	- @javax.jws.WebMethod
	- @javax.xml.ws.WebFault
	- @WebResult(name="order")
	- @WebParam(name="orderId")

	
Binding
	- javax.jws.soap.SOAPBinding()
	- @SOAPBinding(style=Style.RPC, use=Use.Literal)
	
Wrapper
	- @javax.xml.ws.RequestWrapper
	- @javax.xml.ws.ResponseWrapper
	- used to bind the incoming or outgoing soap messages to java objects in a customize manner
	- used very rarely -> JAX-WS standard does a great job
	

JAXB
- Java Architecture for XML Binding
- JAXB maps or binds the xml to java beans and java objects to xml by hiding the complexity of xml programming
- External tools for binding
	- XJC
	- Schemagen
	- RuntimeAPI
		- Annotations
		- unmarshall
		- marshall
- Webservice engines apache CXF will handle the marshalling and unmarshalling of java to xml
- Current version 2.2


Maven XJC Compiler
- Its a mvn plugin and used to generate the classes from the xsd
- Will we executed as part of mvn build
- plugin generates the java stubs

JAXB RuntimeAPI
- Used to marshall and unmarshall the java to xml and vice versa
- Provides classes and methods that are usefull for marshall and unmarshall the java stubs to xml 

====================================================================================================================================================
Java Webservices Stack

- Provides tools for developing the webservices
- Webservice stack serialize and deserialize the request and responses to language objects and back to xml or json formats
- Fomous Webservice Stack
	- Apache CXF
	- Apache Axis
	- Metro --> Glassfish
- Weblogic 
- Websphere


Apache CXF 
- Most Famous webserice engine in the java space
- CXF provides implementation for both JAX-RS and JAX-WS
- Using CXF both SOAP and RESTFull services can be developed

Why Apache CXF?
- CXF has both SOAP and Restfull engine
- Serializes and deserializes the java objects to data formats like xml and json
- Dispatches messages to the appropriate methods
	
	Client(Request) -> Message(xml)-> Webservices Engine(SOAP/REST) -> (Deserialize)JavaObjects -> (Dispatch)WS Endpoint method

- WS Standards
	- WS Security
	- WS Policy
	- Just needs to configure them

- Tools
	- WSDL2JAVA
	- JAVA2WSDL
	- Plugin support for maven and ant

- CXF is supported by spring and springboot
	- Easy to configure --> just needs to add the dependency

- Extend and customize 
	- Using Handlers and Interceptors

- Current Version
	- 3.0.3


CXF and Springboot
- Springboot has support for CXF
- cxf-spring-boot-starter-jaxws dependency is used to developing the soap webservice
- cxf-spring-boot-starter-jaxws will add CXF engine that implements the JAX-WS and handles all the SOAP webserice


- Steps to creat a SOAP WS with Apache CXF in springboot
	- Create the springboot project
	- add the cxf-spring-boot-starter-jaxws depenedency
	- define or create the webservice endpoint with class and methods
		-@WebService and @WebMethod
	- publish the endpoint
		- create the spring configuration file
		- define the bean for the endpoint
		- inject the cxf bus to configuration class
			- CXF bus is runtime enviroment of the CXF JAX-WS
		- publish the endpoint
	- Add the context path for the app
		- application.properties
			- server.servlet.context-path=hellows
			- cxf.path=/
	- Run the application
	- Test with client like SoapUI
		- Create a Soap project
		- Add the wsdl 
		- send the request to endpoint


		
	
Developing Topdown or WSDL first webserives


- Create the project
	- Create the wsdl
	- Generate the stubs out of WSDL
- Provide implementation to the endpoints
- Create the config class and publish the endpoints
- Run the application
- Test through Soap client


- Create the Springboot project
- Add the cxf-spring-boot-starter-jaxws dependency  
- Create the WSDL file
	- Add it to the src/main/resources/wsdl/filename.wsdl path
	- classpath: wsdl:filename.wsdl
- Add the CXF WSDL2JAVA Codegen plugin to pom.xml
- Generate the stubs in the target directory
- Define the endpoint using the stubs
	- -@WebService and @WebMethod
- publish the endpoint
		- create the spring configuration file
		- define the bean for the endpoint
		- inject the cxf bus to configuration class
			- CXF bus is runtime enviroment of the CXF JAX-WS
		- publish the endpoint
- Add the context path for the app
		- application.properties
			- server.servlet.context-path=hellows
			- cxf.path=/
	- Run the application
	- Test with client like SoapUI
		- Create a Soap project
		- Add the wsdl 
		- send the request to endpoint 



Java SOAP Client

- Create the Springboot project
- Add the cxf-spring-boot-starter-jaxws dependency
- Copy the WSDL and generate the stubs
- Create the client
- Run the application



===============================================================================================================================

SECTION 14: JAX-WS Handlers

JAX-WS Handlers
- Non-Functional requirements applied across the service producer, consumer and endpoints
- Like Cross Cutting concerns
- JAX-WS handlers are classes that implements the interfaces in the JAX-WS API
- Handlers will be executed for both incoming and outgoing requests
- Apache CXF will call these handlers once request comes from client and request goes out from the service provider
	- Logic inside the handlers will be executed by webservice stack engine like CXF
- Like Servlet Filters - Except that handlers can be applied both server and client side
- Use case
	- WS Handlers can be used to handle the custom authentication

	
Two Types of Handlers
- SOAPHandlers
	- Have access to entire message like protocal info(HTTP Headers), SOAP headers, SOAP Body
	- Implemented by implementing interface SOAPHandler<SOAPMessgeContext>
	- SOAPMessageContext will wrap the whole SOAP Message
	- life cycle methods of SOAPHandler are
		- handleMessage
		- handleFault
		- getHeaders
		- close
	- Life cycle methods are invoked on incoming and outgoing request and respons
	- handleFault will be executed only when exeception occurs
	- close will be executed at the end of response 
		- any cleaning code can put in the close method
- LogicalHandlers
	- LogicalHandler has access only to Message Body or SoapMessage body
	- LogicalHandlers are implemented by implementing LogicalHandler<LogicalMessageContext>
	- Life Cycle methods
		- handleMessage
		- handleFault
		- close
		- It does have getHeader() as it's don't have access to soap headers
	- LogicalHandlers only deal with Payload

Steps for Implementing SOAP Handlers
	- Design the Handler Chain
		- One handler can call the another one like servlet filter
	- Create the Handler
	- Configure the Handler
	- Run and Test
	
		
Handler Flow
- Incoming Request
	- getHeaders() will be executed first
	- handleMessage() will gets executed
	- Webservices endpoint will gets executed (business logic)
	- if any error or exception at endpoint then handleFault() will gets executed
- Outgoing Response
	- getHeaders()
	- handleMessage()
	- close() -cleaning up the resources/wsdl/filename
	
getHeaders method in JAX-WS handler
- mustUnderstand is a attribute on the soap header that will force the service provider that header should be processed
- mustUnderstand can be either 0 or 1
	- 1 ---> must be processed by the webservice provider
		- code at server side must handle the header
	- 0 ---> not mandatory
- if header is not processed by webservice provider then webservice engine will throw the error

========================================================================================================

SECTION 15: SOAP FAULT

- Webservice apart from handling the request and responses should handle the errors when something goes wrong
- SOAP Standard provides a element to represent the error and sent them in response body to client
- We dont needs to create the fault code --> we can do that
	- We just needs to throw the exception 
	- Webservice stack or engines will convert execption into fault element as the response body
	- At client side also we needs to handle the fault code and convert them back to exception
- When an exception occurs then webservice engine will send the fault in the soap message body
- SOAP:Fault is a child element of SOAP:BODY
- SOAP:Fault has 4 child elements
	- faultCode
	- faultString
	- faultActor
	- detail
- FaultCodes
	- SOAP-ENV:VersionMismatch
		- Client Soap envelop namespace is not match with what server is expecting

	- SOAP-ENV:MustUnderstand
		- mustUnderstand is automatically used when mustUnderstand attribute is set on the header
		- if header is not processed to mustUnderstand set to 1 --> then fault code will be 
		- EX
			- If mustUnderstand attribute is set to 1 on the soap header
			- And soap header having security element as child 
				- WS security is the child element of soap header element
			- And sever is not able to understand the WS security element then it will send the response with mustUnderstand
				fault code	
	- SOAP-ENV:Client
		- Client fault code is sent if client is sending the message thats not valid or not wellformed
	
	- SOAP-ENV:Server 
		- If any error occurs at server side

========================================================================================================		
		
SECTION 16

REST Web service concepts

- REST - Representation State Transfer
- REST supports multiple data formats because HTTP supports MIME Types
- REST is stateless as HTTP is stateless
- State is maintained at client side and not at client side
- REST resouces are easy to access
- REST provides single interface to perform curd operations



RESTFULL services advantages

- REST resources are easy to access
- REST is interoperabe and supports multiple fomats
- Interoperability  and multipel data foramts --> applications written any language can communicate with each other using http
- Scalability -> we can easily scale the applications to multiple servers throuhg load balancers
	- cache can be enbaled at client side so that performance of application wil increase
- Availability - more the instances of apps, availability will gets increase

When to use RESTFul Services
-  REST will be used when  both producer and consumer have an mutual understanding of contract
	- contract -> what is the data format and how to consume this
	- No formal contract b/w producer and consumer
- Supports Multiple Data Formats 
- Bandwith and Memory
	- unlike soap, messages reduces overhead in mobile devices
	- consumer less bandwidth -> required for mobile devices
	- faster data exchange
- Caching
	- HTTP Statelessness allows us to cache all webservices responses
	- Cache will increase the application response as we can send the response from cache instead of application sending the response back
		- caching framework can be used 
		- just needs to configure them
- Existing Logic can be exposed easily
	- saves lots of times and developer productivity
		- can make use for new UI frameworks like angular and android
		- Easy to integrate with new frameworks and mobile devices
		
		
		
		
REST 
- HTTP STATUS Codes
- One Single interface for performing CRUD operations	
	- PUT, DELETE, GET, POST
	- Developer needs to know only about HTTP methods
	
WHY 
-	1 Single Interface
-	2 EASY to Access
-	3 Multiple Data formats
-	3 Statelessness
-	4 Availability
-	5 Scalability
-	6 Faster Integration
-	7 Less bandwidth and memory
-	9 Caching 	
-	10 Interoperability

WHEN
-	1. No formal contract
-	2. Multiple data formats
-	3. Less bandwith
-	4. Statelessness
 	
========================================================================================================
	
SECTION 17 : REST Implementation

4 Design Steps for RESTFul services
-	1. Identify the resouces
-	2. Create the endpoints to access the resources
-	3. Assign the HTTP methods
-	4. Choose the data format for exchange 
	
JAX-RS
- JAX-RS is a specification and API from orcle
- Specification 
	- Is a set of rule and guidelines
	- Webservice engines like CXF and Jersey will implement the specification(JAX-RS) standards
-API
	- Developers will implement the APIs by using the annotations
	- API is consists of annotations

- JAX-RS annotations are available from javax.ws.rs package
	
- Annotations 
	- @Path("/users/{username}")
	- Http methods
		- @Get
		- @Put
		- @Post
		- @Delete
	- Data Formats
		- @Consumes("text/plain")
		- @Produces({"application/xml","application/json"})
	- Parameters
		- @PathParam
		- @QueryParam
		- @FormParam

- Creating the REST project
	- start.spring.io
	- create the spring boot app
	- add the cxf-spring-boot-starter-jaxrs
	
	
		

		